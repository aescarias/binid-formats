// BinDef for Google's Hyphenation Pattern Binary (hyb) file format
// https://android.googlesource.com/platform/frameworks/minikin/+/master/doc/hyb_file_format.md

{
  meta: {
    bdf: "0.3",
    name: "Google Hyphenation Pattern Binary",
    mime: [],
    exts: [".hyb"],
    doc: "File format developed by Google to store hyphenation patterns in a " +
         "compact format. It is primarily used by Android but also appears in " +
         "some Chromium-based products."
  },
  binary: [
    { id: header, 
      name: "Header",
      type: struct,
      endian: "little",
      fields: [
        { type: magic, match: "hy\xADb" },
        { id: version,        type: uint32, name: "Version" },
        { id: alphabetOffset, type: uint32, name: "Alphabet table offset" },
        { id: trieOffset,     type: uint32, name: "Trie offset" },
        { id: patternOffset,  type: uint32, name: "Pattern offset" },
        { id: fileSize,       type: uint32, name: "File size (bytes)" }
      ]
    },
    { id: alphabetTable, 
      name: "Alphabet table",
      type: struct, 
      at: header.alphabetOffset, 
      endian: "little",
      fields: [
        { id: version, type: uint32, name: "Version" },
        
        { if: version == 0, id: minCodePoint, type: uint32, name: "Min. codepoint" },
        { if: version == 0, id: maxCodePoint, type: uint32, name: "Max. codepoint" },
        // TODO: _data and _entries are private until we add a distinct string 
        // and byte type
        { if: version == 0, id: _data,    type: byte[maxCodePoint - minCodePoint] },
        { if: version == 1, id: count,    type: uint32, name: "Entries in table" },
        { if: version == 1, id: _entries, type: byte[count] }
      ]
    },
    { id: trieTable,
      name: "Trie table",
      type: struct,
      at: header.trieOffset,
      endian: "little",
      fields: [
        { type: uint32, id: version,      name: "Version" },
        { type: uint32, id: charMask,     name: "Character mask" },
        { type: uint32, id: linkShift,    name: "Link shift" },
        { type: uint32, id: linkMask,     name: "Link mask" },
        { type: uint32, id: patternShift, name: "Pattern shift" },
        { type: uint32, id: nEntries,     name: "Number of entries" },
        { type: byte[nEntries], id: _entries }
      ]
    },
    { id: patternTable,
      type: struct,
      name: "Pattern table",
      endian: "little",
      at: header.patternOffset,
      fields: [
        { type: uint32, id: version,       name: "Version" },
        { type: uint32, id: count,         name: "Count" },
        { type: uint32, id: patternOffset, name: "Pattern offset" },
        { type: uint32, id: patternSize,   name: "Pattern size (bytes)" },
        { type: array[count],
          id: entries,
          name: "Entries",
          item: { type: uint32, id: entry, name: "Value", endian: "little" }
        },
        { type: byte[patternSize], id: patternBuf, name: "Pattern buffer" }
      ]
    }
  ]
}