{
  meta: {
    bdf: "0.2",
    name: "Executable and Linkable Format",
    mime: ["application/x-executable"],
    exts: [],
    doc: 
      "The Executable and Linkable Format (ELF) is a common standard file format " +
      "used for executable files and shared libraries. It is the standard executable " +
      "file format among Unix-likes."
  },
  types: [
    { id: ELFClass,
      type: enum[uint8],
      members: [
        { id: ELF32, value: 0x1, doc: "32-bit" },
        { id: ELF64, value: 0x2, doc: "64-bit" }
      ]
    },
    { id: ELFEndian,
      type: enum[uint8],
      members: [
        { id: ELF_LITTLE, value: 0x1, doc: "Little-endian" },
        { id: ELF_BIG,    value: 0x2, doc: "Big-endian" }
      ]
    },
    { id: OSABI,
      type: enum[uint8],
      members: [
        { id: ABI_SYSTEM_V, value: 0x00, doc: "System V" },
        { id: ABI_HP_UX,    value: 0x01, doc: "HP-UX" },
        { id: ABI_NETBSD,   value: 0x02, doc: "NetBSD" },
        { id: ABI_LINUX,    value: 0x03, doc: "Linux" },
        { id: ABI_HURD,     value: 0x04, doc: "GNU Hurd" },
        { id: ABI_SOLARIS,  value: 0x06, doc: "Solaris" },
        { id: ABI_AIX,      value: 0x07, doc: "AIX (Monterey)" },
        { id: ABI_IRIX,     value: 0x08, doc: "IRIX" },
        { id: ABI_FREEBSD,  value: 0x09, doc: "FreeBSD" },
        { id: ABI_TRU64,    value: 0x0A, doc: "Tru64" },
        { id: ABI_NOVELL,   value: 0x0B, doc: "Novell Modesto" },
        { id: ABI_OPENBSD,  value: 0x0C, doc: "OpenBSD" },
        { id: ABI_OPENVMS,  value: 0x0D, doc: "OpenVMS" },
        { id: ABI_NONSTOP,  value: 0x0E, doc: "NonStop Kernel" },
        { id: ABI_AROS,     value: 0x0F, doc: "AROS" },
        { id: ABI_FENIXOS,  value: 0x10, doc: "FenixOS" },
        { id: ABI_NUXI,     value: 0x11, doc: "Nuxi CloudABI" },
        { id: ABI_OPENVOS,  value: 0x12, doc: "Stratus Technologies OpenVOS" },
      ]
    },
    // e_machine sources:
    // https://www.sco.com/developers/gabi/2009-10-26/ch4.eheader.html#e_machine
    // https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/elf.h;hb=0f62fe0532
    { id: ISA,
      type: enum[uint16],
      endian: _elfEndian == 1 ? "little" : "big",
      members: [
        {id: EM_NONE,          value: 0,   doc: "No machine"},
        {id: EM_M32,           value: 1,   doc: "AT&T WE 32100"},
        {id: EM_SPARC,         value: 2,   doc: "SPARC"},
        {id: EM_386,           value: 3,   doc: "Intel 80386"},
        {id: EM_68K,           value: 4,   doc: "Motorola 68000"},
        {id: EM_88K,           value: 5,   doc: "Motorola 88000"},
        {id: EM_MCU,           value: 6,   doc: "Intel MCU"},
        {id: EM_860,           value: 7,   doc: "Intel 80860"},
        {id: EM_MIPS,          value: 8,   doc: "MIPS I Architecture"},
        {id: EM_S370,          value: 9,   doc: "IBM System/370 Processor"},
        {id: EM_MIPS_RS3_LE,   value: 10,  doc: "MIPS RS3000 Little-endian"},
        {id: EM_RESERVED_11,   value: 11,  doc: "Reserved for future use"},
        {id: EM_RESERVED_12,   value: 12,  doc: "Reserved for future use"},
        {id: EM_RESERVED_13,   value: 13,  doc: "Reserved for future use"},
        {id: EM_RESERVED_14,   value: 14,  doc: "Reserved for future use"},
        {id: EM_PARISC,        value: 15,  doc: "Hewlett-Packard PA-RISC"},
        {id: EM_RESERVED_16,   value: 16,  doc: "Reserved for future use"},
        {id: EM_VPP500,        value: 17,  doc: "Fujitsu VPP500"},
        {id: EM_SPARC32PLUS,   value: 18,  doc: "Enhanced instruction set SPARC"},      
        {id: EM_960,           value: 19,  doc: "Intel 80960"},
        {id: EM_PPC,           value: 20,  doc: "PowerPC"},
        {id: EM_PPC64,         value: 21,  doc: "64-bit PowerPC"},
        {id: EM_S390,          value: 22,  doc: "IBM System/390 Processor"},
        {id: EM_SPU,           value: 23,  doc: "IBM SPU/SPC"},
        {id: EM_RESERVED_24,   value: 24,  doc: "Reserved for future use"},
        {id: EM_RESERVED_25,   value: 25,  doc: "Reserved for future use"},
        {id: EM_RESERVED_26,   value: 26,  doc: "Reserved for future use"},
        {id: EM_RESERVED_27,   value: 27,  doc: "Reserved for future use"},
        {id: EM_RESERVED_28,   value: 28,  doc: "Reserved for future use"},
        {id: EM_RESERVED_29,   value: 29,  doc: "Reserved for future use"},
        {id: EM_RESERVED_30,   value: 30,  doc: "Reserved for future use"},
        {id: EM_RESERVED_31,   value: 31,  doc: "Reserved for future use"},
        {id: EM_RESERVED_32,   value: 32,  doc: "Reserved for future use"},
        {id: EM_RESERVED_33,   value: 33,  doc: "Reserved for future use"},
        {id: EM_RESERVED_34,   value: 34,  doc: "Reserved for future use"},
        {id: EM_RESERVED_35,   value: 35,  doc: "Reserved for future use"},
        {id: EM_V800,          value: 36,  doc: "NEC V800"},
        {id: EM_FR20,          value: 37,  doc: "Fujitsu FR20"},
        {id: EM_RH32,          value: 38,  doc: "TRW RH-32"},
        {id: EM_RCE,           value: 39,  doc: "Motorola RCE"},
        {id: EM_ARM,           value: 40,  doc: "Advanced RISC Machines ARM"},
        {id: EM_ALPHA,         value: 41,  doc: "Digital Alpha"},
        {id: EM_SH,            value: 42,  doc: "Hitachi SH"},
        {id: EM_SPARCV9,       value: 43,  doc: "SPARC Version 9"},
        {id: EM_TRICORE,       value: 44,  doc: "Siemens TriCore embedded processor"},
        {id: EM_ARC,           value: 45,  doc: "Argonaut RISC Core, Argonaut Technologies Inc."},
        {id: EM_H8_300,        value: 46,  doc: "Hitachi H8/300"},
        {id: EM_H8_300H,       value: 47,  doc: "Hitachi H8/300H"},
        {id: EM_H8S,           value: 48,  doc: "Hitachi H8S"},
        {id: EM_H8_500,        value: 49,  doc: "Hitachi H8/500"},
        {id: EM_IA_64,         value: 50,  doc: "Intel IA-64 processor architecture"},
        {id: EM_MIPS_X,        value: 51,  doc: "Stanford MIPS-X"},
        {id: EM_COLDFIRE,      value: 52,  doc: "Motorola ColdFire"},
        {id: EM_68HC12,        value: 53,  doc: "Motorola M68HC12"},
        {id: EM_MMA,           value: 54,  doc: "Fujitsu MMA Multimedia Accelerator"},
        {id: EM_PCP,           value: 55,  doc: "Siemens PCP"},
        {id: EM_NCPU,          value: 56,  doc: "Sony nCPU embedded RISC processor"},
        {id: EM_NDR1,          value: 57,  doc: "Denso NDR1 microprocessor"},
        {id: EM_STARCORE,      value: 58,  doc: "Motorola Star*Core processor"},
        {id: EM_ME16,          value: 59,  doc: "Toyota ME16 processor"},
        {id: EM_ST100,         value: 60,  doc: "STMicroelectronics ST100 processor"},
        {id: EM_TINYJ,         value: 61,  doc: "Advanced Logic Corp. TinyJ embedded processor family"},
        {id: EM_X86_64,        value: 62,  doc: "AMD x86-64 architecture"},
        {id: EM_PDSP,          value: 63,  doc: "Sony DSP Processor"},
        {id: EM_PDP10,         value: 64,  doc: "Digital Equipment Corp. PDP-10"},
        {id: EM_PDP11,         value: 65,  doc: "Digital Equipment Corp. PDP-11"},
        {id: EM_FX66,          value: 66,  doc: "Siemens FX66 microcontroller"},
        {id: EM_ST9PLUS,       value: 67,  doc: "STMicroelectronics ST9+ 8/16 bit microcontroller"},
        {id: EM_ST7,           value: 68,  doc: "STMicroelectronics ST7 8-bit microcontroller"},
        {id: EM_68HC16,        value: 69,  doc: "Motorola MC68HC16 Microcontroller"},
        {id: EM_68HC11,        value: 70,  doc: "Motorola MC68HC11 Microcontroller"},
        {id: EM_68HC08,        value: 71,  doc: "Motorola MC68HC08 Microcontroller"},
        {id: EM_68HC05,        value: 72,  doc: "Motorola MC68HC05 Microcontroller"},
        {id: EM_SVX,           value: 73,  doc: "Silicon Graphics SVx"},
        {id: EM_ST19,          value: 74,  doc: "STMicroelectronics ST19 8-bit microcontroller"},
        {id: EM_VAX,           value: 75,  doc: "Digital VAX"},
        {id: EM_CRIS,          value: 76,  doc: "Axis Communications 32-bit embedded processor"},
        {id: EM_JAVELIN,       value: 77,  doc: "Infineon Technologies 32-bit embedded processor"},
        {id: EM_FIREPATH,      value: 78,  doc: "Element 14 64-bit DSP Processor"},
        {id: EM_ZSP,           value: 79,  doc: "LSI Logic 16-bit DSP Processor"},
        {id: EM_MMIX,          value: 80,  doc: "Donald Knuth's educational 64-bit processor"},
        {id: EM_HUANY,         value: 81,  doc: "Harvard University machine-independent object files"},
        {id: EM_PRISM,         value: 82,  doc: "SiTera Prism"},
        {id: EM_AVR,           value: 83,  doc: "Atmel AVR 8-bit microcontroller"},
        {id: EM_FR30,          value: 84,  doc: "Fujitsu FR30"},
        {id: EM_D10V,          value: 85,  doc: "Mitsubishi D10V"},
        {id: EM_D30V,          value: 86,  doc: "Mitsubishi D30V"},
        {id: EM_V850,          value: 87,  doc: "NEC v850"},
        {id: EM_M32R,          value: 88,  doc: "Mitsubishi M32R"},
        {id: EM_MN10300,       value: 89,  doc: "Matsushita MN10300"},
        {id: EM_MN10200,       value: 90,  doc: "Matsushita MN10200"},
        {id: EM_PJ,            value: 91,  doc: "picoJava"},
        {id: EM_OPENRISC,      value: 92,  doc: "OpenRISC 32-bit embedded processor"},
        {id: EM_ARC_COMPACT,   value: 93,  doc: "ARC International ARCompact processor (old spelling/synonym: EM_ARC_A5)"},
        {id: EM_XTENSA,        value: 94,  doc: "Tensilica Xtensa Architecture"},
        {id: EM_VIDEOCORE,     value: 95,  doc: "Alphamosaic VideoCore processor"},
        {id: EM_TMM_GPP,       value: 96,  doc: "Thompson Multimedia General Purpose Processor"},
        {id: EM_NS32K,         value: 97,  doc: "National Semiconductor 32000 series"},
        {id: EM_TPC,           value: 98,  doc: "Tenor Network TPC processor"},
        {id: EM_SNP1K,         value: 99,  doc: "Trebia SNP 1000 processor"},
        {id: EM_ST200,         value: 100, doc: "STMicroelectronics (www.st.com) ST200 microcontroller"},
        {id: EM_IP2K,          value: 101, doc: "Ubicom IP2xxx microcontroller family"},
        {id: EM_MAX,           value: 102, doc: "MAX Processor"},
        {id: EM_CR,            value: 103, doc: "National Semiconductor CompactRISC microprocessor"},
        {id: EM_F2MC16,        value: 104, doc: "Fujitsu F2MC16"},
        {id: EM_MSP430,        value: 105, doc: "Texas Instruments embedded microcontroller msp430"},
        {id: EM_BLACKFIN,      value: 106, doc: "Analog Devices Blackfin (DSP) processor"},
        {id: EM_SE_C33,        value: 107, doc: "S1C33 Family of Seiko Epson processors"},
        {id: EM_SEP,           value: 108, doc: "Sharp embedded microprocessor"},
        {id: EM_ARCA,          value: 109, doc: "Arca RISC Microprocessor"},
        {id: EM_UNICORE,       value: 110, doc: "Microprocessor series from PKU-Unity Ltd. and MPRC of Peking University"},
        {id: EM_EXCESS,        value: 111, doc: "eXcess: 16/32/64-bit configurable embedded CPU"},
        {id: EM_DXP,           value: 112, doc: "Icera Semiconductor Inc. Deep Execution Processor"},
        {id: EM_ALTERA_NIOS2,  value: 113, doc: "Altera Nios II soft-core processor"},
        {id: EM_CRX,           value: 114, doc: "National Semiconductor CompactRISC CRX microprocessor"},
        {id: EM_XGATE,         value: 115, doc: "Motorola XGATE embedded processor"},
        {id: EM_C166,          value: 116, doc: "Infineon C16x/XC16x processor"},
        {id: EM_M16C,          value: 117, doc: "Renesas M16C series microprocessors"},
        {id: EM_DSPIC30F,      value: 118, doc: "Microchip Technology dsPIC30F Digital Signal Controller"},
        {id: EM_CE,            value: 119, doc: "Freescale Communication Engine RISC core"},
        {id: EM_M32C,          value: 120, doc: "Renesas M32C series microprocessors"},
        {id: EM_RESERVED_121,  value: 121, doc: "Reserved for future use"},
        {id: EM_RESERVED_122,  value: 122, doc: "Reserved for future use"},
        {id: EM_RESERVED_123,  value: 123, doc: "Reserved for future use"},
        {id: EM_RESERVED_124,  value: 124, doc: "Reserved for future use"},
        {id: EM_RESERVED_125,  value: 125, doc: "Reserved for future use"},
        {id: EM_RESERVED_126,  value: 126, doc: "Reserved for future use"},
        {id: EM_RESERVED_127,  value: 127, doc: "Reserved for future use"},
        {id: EM_RESERVED_128,  value: 128, doc: "Reserved for future use"},
        {id: EM_RESERVED_129,  value: 129, doc: "Reserved for future use"},
        {id: EM_RESERVED_130,  value: 130, doc: "Reserved for future use"},
        {id: EM_TSK3000,       value: 131, doc: "Altium TSK3000 core"},
        {id: EM_RS08,          value: 132, doc: "Freescale RS08 embedded processor"},
        {id: EM_RESERVED_133,  value: 133, doc: "Reserved for future Analog Devices DSP microprocessor"},
        {id: EM_ECOG2,         value: 134, doc: "Cyan Technology eCOG2 microprocessor"},
        {id: EM_SCORE7,        value: 135, doc: "Sunplus S+core7 RISC processor"},
        {id: EM_DSP24,         value: 136, doc: "New Japan Radio (NJR) 24-bit DSP Processor"},
        {id: EM_VIDEOCORE3,    value: 137, doc: "Broadcom VideoCore III processor"},
        {id: EM_LATTICEMICO32, value: 138, doc: "RISC processor for Lattice FPGA architecture"},
        {id: EM_SE_C17,        value: 139, doc: "Seiko Epson C17 family"},
        {id: EM_TI_C6000,      value: 140, doc: "Texas Instruments TMS320C6000 DSP family"},
        {id: EM_TI_C2000,      value: 141, doc: "Texas Instruments TMS320C2000 DSP family"},
        {id: EM_TI_C5500,      value: 142, doc: "Texas Instruments TMS320C55x DSP family"},
        {id: EM_TI_ARP32,      value: 143, doc: "Texas Instruments Application Specific RISC"},
        {id: EM_TI_PRU,        value: 144, doc: "Texas Instruments Programmable Realtime Unit"},
        {id: EM_RESERVED_145,  value: 145, doc: "Reserved for future use"},
        {id: EM_RESERVED_146,  value: 146, doc: "Reserved for future use"},
        {id: EM_RESERVED_147,  value: 147, doc: "Reserved for future use"},
        {id: EM_RESERVED_148,  value: 148, doc: "Reserved for future use"},
        {id: EM_RESERVED_149,  value: 149, doc: "Reserved for future use"},
        {id: EM_RESERVED_150,  value: 150, doc: "Reserved for future use"},
        {id: EM_RESERVED_151,  value: 151, doc: "Reserved for future use"},
        {id: EM_RESERVED_152,  value: 152, doc: "Reserved for future use"},
        {id: EM_RESERVED_153,  value: 153, doc: "Reserved for future use"},
        {id: EM_RESERVED_154,  value: 154, doc: "Reserved for future use"},
        {id: EM_RESERVED_155,  value: 155, doc: "Reserved for future use"},
        {id: EM_RESERVED_156,  value: 156, doc: "Reserved for future use"},
        {id: EM_RESERVED_157,  value: 157, doc: "Reserved for future use"},
        {id: EM_RESERVED_158,  value: 158, doc: "Reserved for future use"},
        {id: EM_RESERVED_159,  value: 159, doc: "Reserved for future use"},
        {id: EM_MMDSP_PLUS,    value: 160, doc: "STMicroelectronics 64bit VLIW Data Signal Processor"},
        {id: EM_CYPRESS_M8C,   value: 161, doc: "Cypress M8C microprocessor"},
        {id: EM_R32C,          value: 162, doc: "Renesas R32C series microprocessors"},
        {id: EM_TRIMEDIA,      value: 163, doc: "NXP Semiconductors TriMedia architecture family"},
        {id: EM_QDSP6,         value: 164, doc: "QUALCOMM DSP6 Processor"},
        {id: EM_8051,          value: 165, doc: "Intel 8051 and variants"},
        {id: EM_STXP7X,        value: 166, doc: "STMicroelectronics STxP7x family of configurable and extensible RISC processors"},     
        {id: EM_NDS32,         value: 167, doc: "Andes Technology compact code size embedded RISC processor family"},
        {id: EM_ECOG1,         value: 168, doc: "Cyan Technology eCOG1X family"},
        {id: EM_ECOG1X,        value: 168, doc: "Cyan Technology eCOG1X family"},
        {id: EM_MAXQ30,        value: 169, doc: "Dallas Semiconductor MAXQ30 Core Micro-controllers"},
        {id: EM_XIMO16,        value: 170, doc: "New Japan Radio (NJR) 16-bit DSP Processor"},
        {id: EM_MANIK,         value: 171, doc: "M2000 Reconfigurable RISC Microprocessor"},
        {id: EM_CRAYNV2,       value: 172, doc: "Cray Inc. NV2 vector architecture"},
        {id: EM_RX,            value: 173, doc: "Renesas RX family"},
        {id: EM_METAG,         value: 174, doc: "Imagination Technologies META processor architecture"},
        {id: EM_MCST_ELBRUS,   value: 175, doc: "MCST Elbrus general purpose hardware architecture"},
        {id: EM_ECOG16,        value: 176, doc: "Cyan Technology eCOG16 family"},
        {id: EM_CR16,          value: 177, doc: "National Semiconductor CompactRISC CR16 16-bit microprocessor"},
        {id: EM_ETPU,          value: 178, doc: "Freescale Extended Time Processing Unit"},
        {id: EM_SLE9X,         value: 179, doc: "Infineon Technologies SLE9X core"},
        {id: EM_L10M,          value: 180, doc: "Intel L10M"},
        {id: EM_K10M,          value: 181, doc: "Intel K10M"},
        {id: EM_RESERVED_182,  value: 182, doc: "Reserved for future Intel use"},
        {id: EM_AARCH64,       value: 183, doc: "ARM AARCH64"},
        {id: EM_RESERVED_184,  value: 184, doc: "Reserved for future ARM use"},
        {id: EM_AVR32,         value: 185, doc: "Atmel Corporation 32-bit microprocessor family"},
        {id: EM_STM8,          value: 186, doc: "STMicroeletronics STM8 8-bit microcontroller"},
        {id: EM_TILE64,        value: 187, doc: "Tilera TILE64 multicore architecture family"},
        {id: EM_TILEPRO,       value: 188, doc: "Tilera TILEPro multicore architecture family"},
        {id: EM_MICROBLAZE,    value: 189, doc: "Xilinx MicroBlaze 32-bit RISC soft processor core"},
        {id: EM_CUDA,          value: 190, doc: "NVIDIA CUDA architecture"}
      ]
    },
    // e_type
    { id: ObjectType,
      type: enum[uint16],
      endian: _elfEndian == 1 ? "little" : "big",
      members: [
        { id: ET_NONE, value: 0x0, doc: "Unknown" },
        { id: ET_REL,  value: 0x1, doc: "Relocatable" },
        { id: ET_EXEC, value: 0x2, doc: "Executable" },
        { id: ET_DYN,  value: 0x3, doc: "Dynamic / shared object" },
        { id: ET_CORE, value: 0x4, doc: "Core (reserved)" }
        // TODO: ET_LOOS, ET_HIOS, ET_LOPROC, ET_HIPROC ranges
      ]
    }
  ],
  binary: [
    // temp field for determining endianness
    { id: _elfEndian, type: uint8, at: 5 },
    { id: header, 
      type: struct,
      name: "ELF Header",
      endian: _elfEndian == 1 ? "little" : "big",
      at: 0,
      fields: [
        { type: magic, match: "\x7fELF" },
        { id: class,      type: ELFClass,   name: "Class" },
        { id: endian,     type: ELFEndian,  name: "Endianness", valid: endian == _elfEndian },
        { id: version,    type: uint8,      name: "Version", valid: version == 1 },
        { id: abiType,    type: OSABI,      name: "Target ABI" },
        { id: abiVersion, type: uint8,      name: "Target ABI version" },
        { type: byte[7] }, // reserved padding
        { id: objectType, type: ObjectType, name: "Object file type" },
        { id: targetISA,  type: ISA,        name: "Target ISA" },
        { id: _version,   type: uint32,     valid: version == 1 },
        { id: entryPointAddr,
          type: class == 1 ? uint32 : uint64,
          name: "Entry point address"
        },
        { id: progHdrTableStart,
          type: class == 1 ? uint32 : uint64,
          name: "Offset to program header table"
        },
        { id: sectHdrTableStart, 
          type: class == 1 ? uint32 : uint64,
          name: "Offset to section header table"
        },
        { id: flags,            type: uint32, name: "Architecture flags" },
        { id: headerSize,       type: uint16, name: "Header size" },
        { id: progHdrEntrySize, type: uint16, name: "Size of program header table entry" },
        { id: nProgHdrEntries,  type: uint16, name: "Number of program header entries" },
        { id: sectHdrEntrySize, type: uint16, name: "Size of section header table entry" },
        { id: nSectHdrEntries,  type: uint16, name: "Number of section header entries" },
        { id: idxSectNames,     type: uint16, name: "Index of section names in table" }
      ]
    },
    { id: programHeader,
      type: array[header.nProgHdrEntries],
      at: header.progHdrTableStart,
      if: header.nProgHdrEntries > 0,
      name: "Program header entries",
      item: {
        id: progHdrEntry,
        type: struct,
        name: "Program header entry",
        endian: header.endian == 1 ? "little" : "big",
        fields: [
          { id: segmentType,   type: uint32, name: "Segment type" },
          { if: header.class == 2, // 64-bit ELF field
            id: segmentFlags,  type: uint32, name: "Segment flags" },
          { id: segmentOffset, 
            type: header.class == 1 ? uint32 : uint64, 
            name: "Offset in file image" },
          { id: vAddr,      
            type: header.class == 1 ? uint32 : uint64,
            name: "Virtual address"
          },
          { id: pAddr,
            type: header.class == 1 ? uint32 : uint64,
            name: "Physical address"
          },
          { id: fileSize,
            type: header.class == 1 ? uint32 : uint64,
            name: "Size of segment in file image"
          },
          { id: memSize,
            type: header.class == 1 ? uint32 : uint64,
            name: "Size of segment in memory"
          },
          { if: header.class == 1, // 32-bit ELF field
            id: segmentFlags,
            type: uint32,
            name: "Segment flags"
          },
          { id: alignment,
            type: header.class == 1 ? uint32 : uint64,
            name: "Address align"
          } 
        ]
      }
    }
  ]
}
